@page "/events/"
@using System.Web;
@using System.Globalization
@using MeetWave.Helper
@{
    var rsvpClasses = new Dictionary<string, List<string>>
    {
        {"NA", new() { "btn-primary", "btn-outline-primary" } },
        {"Going", new() { "btn-success", "btn-outline-success" } },
        {"Interested", new() { "btn-secondary", "btn-outline-secondary" }}
    };

    var ti = new CultureInfo("en-US", false).TextInfo;
}

<HeadContent>
    <meta property="og:title" content="Fetwave Events" />
    <meta property="og:description" content="View Fetwave Calendar" />
</HeadContent>

<h3>Events</h3>
@if(UserId.HasValue)
{
    <button @onclick="NavCreateEvent">Create Event</button>
}

<div>
    Date
    <br />
    <span>
        <label>From Date:</label>
        <DatetimePicker OnDatetimeChangeCallback="@StartDateChange" InitialDate="@CalendarStartDate" />
        <label>To Date:</label>
        <DatetimePicker OnDatetimeChangeCallback="@EndDateChange" InitialDate="@CalendarEndDate" />
    </span>
</div>


<RadzenTabs>
    <Tabs>
        <RadzenTabsItem Text="Local">
            @if (!loading)
            {
                <RegionSelector OnRegionChange="@GetEventsForRegion" ShowAllRegion="true" />
            }
            
            @foreach (var calendarEvent in CalendarEvents ?? [])
            {
                var startTime = calendarEvent.StartDate;
                (EventRsvps ?? []).TryGetValue(calendarEvent.Id, out var rsvps);
                var rsvpCount = rsvps?.Count(r => r.DeletedTS == null);
                var userRsvp = rsvps?.FirstOrDefault(r => r.UserId == UserId.ToString());
                var rsvpStatus = userRsvp?.State;
                var rsvpDeleted = userRsvp == null || userRsvp.DeletedTS != null;
                <div class="card">
                    <div class="card-header">
                        <div class="form-inline">
                            <button type="button" @onclick=@(async () => await UpdateRsvp(null, userRsvp, calendarEvent.Id)) class="btn @(rsvpDeleted ? rsvpClasses["NA"][0] : rsvpClasses["NA"][1])">N/A</button>
                            <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Going, userRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Going.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Going"][0] : rsvpClasses["Going"][1])">Going</button>
                            <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Interested, userRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Interested.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Interested"][0] : rsvpClasses["Interested"][1])">Interested</button>
                            @if (calendarEvent.CreatedUserId!.Equals(UserId.ToString(), StringComparison.OrdinalIgnoreCase))
                            {
                                <button @onclick="(() => GotoEditEvent(calendarEvent.UniqueId.ToString()))">Edit</button>
                            }
                        </div>
                    </div>
                    <div class="card-body">
                        <h3 class="card-title"><a href="@($"/event/{calendarEvent.UniqueId}")">@calendarEvent.Title</a></h3>
                        <div class="share">
                            <button type="button" class="btn btn-info" onclick=@($"copyToClipboard(event, 'https://www.fetwave.com/event/{calendarEvent.UniqueId}')")>Copy Link</button>
                        </div>
                        <div class="eventDetails">
                            <h5><i class="bi bi-clock"></i>@($"Happening on {startTime?.DayOfWeek} {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>
                            @if (!string.IsNullOrEmpty(calendarEvent.Address))
                            {
                                <h5><a href="https://www.google.com/maps/search/?api=1&query=@HttpUtility.UrlEncode(calendarEvent.Address)"><i class="bi bi-map"></i>@calendarEvent.Address</a></h5>
                            }
                            <p>@ti.ToTitleCase(calendarEvent.Region?.Name), @calendarEvent.Region?.StateCode</p>
                            @if (calendarEvent.Categories?.Any() ?? false)
                            {
                                <p>Category: @(string.Join(", ", calendarEvent.Categories?.Select(d => d.Name) ?? []))</p>
                            }
                            @if (calendarEvent.DressCodes?.Any() ?? false)
                            {
                                <p>Dress Code: @(string.Join(", ", calendarEvent.DressCodes?.Select(d => d.Name) ?? []))</p>
                            }
                        </div>
                        <p class="card-text">
                            @{
                                var displayDescription = calendarEvent.Description;
                                displayDescription = displayDescription?.Substring(0, Math.Min(displayDescription.Length, 300))
                                + (displayDescription.Length > 300 ? "..." : string.Empty);
                            }
                            @displayDescription
                        </p>
                        <p>RSVP Count : @rsvpCount</p>
                    </div>
                </div>
                <br />
            }
        </RadzenTabsItem>
        <RadzenTabsItem Text="RSVPed To" Disabled="UserId == null">
            @foreach (var calendarEvent in RsvpedEvents ?? [])
            {
                var startTime = calendarEvent.StartDate;
                (EventRsvps ?? []).TryGetValue(calendarEvent.Id, out var rsvps);
                var rsvpCount = rsvps?.Count(r => r.DeletedTS == null);
                var userRsvp = rsvps?.FirstOrDefault(r => r.UserId == UserId.ToString());
                var rsvpStatus = userRsvp?.State;
                var rsvpDeleted = userRsvp == null || userRsvp.DeletedTS != null;
                <div class="card">
                    <div class="card-header">
                        <div class="form-inline">
                            <button type="button" @onclick=@(async () => await UpdateRsvp(null, userRsvp, calendarEvent.Id)) class="btn @(rsvpDeleted ? rsvpClasses["NA"][0] : rsvpClasses["NA"][1])">N/A</button>
                            <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Going, userRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Going.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Going"][0] : rsvpClasses["Going"][1])">Going</button>
                            <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Interested, userRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Interested.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Interested"][0] : rsvpClasses["Interested"][1])">Interested</button>
                            @if (calendarEvent.CreatedUserId!.Equals(UserId.ToString(), StringComparison.OrdinalIgnoreCase))
                            {
                                <button @onclick="(() => GotoEditEvent(calendarEvent.UniqueId.ToString()))">Edit</button>
                            }
                        </div>
                    </div>
                    <div class="card-body">
                        <h3 class="card-title"><a href="@($"/event/{calendarEvent.UniqueId}")">@calendarEvent.Title</a></h3>
                        <div class="share">
                            <button type="button" class="btn btn-info" onclick=@($"copyToClipboard(event, 'https://www.fetwave.com/event/{calendarEvent.UniqueId}')")>Copy Link</button>
                        </div>
                        <div class="eventDetails">
                            <h5><i class="bi bi-clock"></i>@($"Happening on {startTime?.DayOfWeek} {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>
                            @if (!string.IsNullOrEmpty(calendarEvent.Address))
                            {
                                <h5><a href="https://www.google.com/maps/search/?api=1&query=@HttpUtility.UrlEncode(calendarEvent.Address)"><i class="bi bi-map"></i>@calendarEvent.Address</a></h5>
                            }
                            <p>@ti.ToTitleCase(calendarEvent.Region?.Name), @calendarEvent.Region?.StateCode</p>
                            @if (calendarEvent.Categories?.Any() ?? false)
                            {
                                <p>Category: @(string.Join(", ", calendarEvent.Categories?.Select(d => d.Name) ?? []))</p>
                            }
                            @if (calendarEvent.DressCodes?.Any() ?? false)
                            {
                                <p>Dress Code: @(string.Join(", ", calendarEvent.DressCodes?.Select(d => d.Name) ?? []))</p>
                            }
                        </div>
                        <p class="card-text">
                            @{
                                var displayDescription = calendarEvent.Description;
                                displayDescription = displayDescription?.Substring(0, Math.Min(displayDescription.Length, 300))
                                + (displayDescription.Length > 300 ? "..." : string.Empty);
                            }
                            @displayDescription
                        </p>
                        <p>RSVP Count : @rsvpCount</p>
                    </div>
                </div>
                <br />
            }
        </RadzenTabsItem>
        <RadzenTabsItem Text="My Groups" Disabled="true">
        </RadzenTabsItem>
        <RadzenTabsItem Text="Organizing" Disabled="!OrganizedEvents?.Any() ?? true">
            @foreach (var calendarEvent in OrganizedEvents ?? [])
            {
                var startTime = calendarEvent.StartDate;
                (EventRsvps ?? []).TryGetValue(calendarEvent.Id, out var rsvps);
                var rsvpCount = rsvps?.Count(r => r.DeletedTS == null);
                var userRsvp = rsvps?.FirstOrDefault(r => r.UserId == UserId.ToString());
                var rsvpStatus = userRsvp?.State;
                var rsvpDeleted = userRsvp == null || userRsvp.DeletedTS != null;
                <div class="card">
                    <div class="card-header">
                        <div class="form-inline">
                            <button type="button" @onclick=@(async () => await UpdateRsvp(null, userRsvp, calendarEvent.Id)) class="btn @(rsvpDeleted ? rsvpClasses["NA"][0] : rsvpClasses["NA"][1])">N/A</button>
                            <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Going, userRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Going.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Going"][0] : rsvpClasses["Going"][1])">Going</button>
                            <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Interested, userRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Interested.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Interested"][0] : rsvpClasses["Interested"][1])">Interested</button>
                            @if (calendarEvent.CreatedUserId!.Equals(UserId.ToString(), StringComparison.OrdinalIgnoreCase))
                            {
                                <button @onclick="(() => GotoEditEvent(calendarEvent.UniqueId.ToString()))">Edit</button>
                            }
                        </div>
                    </div>
                    <div class="card-body">
                        <h3 class="card-title"><a href="@($"/event/{calendarEvent.UniqueId}")">@calendarEvent.Title</a></h3>
                        <div class="share">
                            <button type="button" class="btn btn-info" onclick=@($"copyToClipboard(event, 'https://www.fetwave.com/event/{calendarEvent.UniqueId}')")>Copy Link</button>
                        </div>
                        <div class="eventDetails">
                            <h5><i class="bi bi-clock"></i>@($"Happening on {startTime?.DayOfWeek} {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>
                            @if (!string.IsNullOrEmpty(calendarEvent.Address))
                            {
                                <h5><a href="https://www.google.com/maps/search/?api=1&query=@HttpUtility.UrlEncode(calendarEvent.Address)"><i class="bi bi-map"></i>@calendarEvent.Address</a></h5>
                            }
                            <p>@ti.ToTitleCase(calendarEvent.Region?.Name), @calendarEvent.Region?.StateCode</p>
                            @if (calendarEvent.Categories?.Any() ?? false)
                            {
                                <p>Category: @(string.Join(", ", calendarEvent.Categories?.Select(d => d.Name) ?? []))</p>
                            }
                            @if (calendarEvent.DressCodes?.Any() ?? false)
                            {
                                <p>Dress Code: @(string.Join(", ", calendarEvent.DressCodes?.Select(d => d.Name) ?? []))</p>
                            }
                        </div>
                        <p class="card-text">
                            @{
                                var displayDescription = calendarEvent.Description;
                                displayDescription = displayDescription?.Substring(0, Math.Min(displayDescription.Length, 300))
                                + (displayDescription.Length > 300 ? "..." : string.Empty);
                            }
                            @displayDescription
                        </p>
                        <p>RSVP Count : @rsvpCount</p>
                    </div>
                </div>
                <br />
            }
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>





