@page "/event/{eventGuid}"
@using System.Web;
@using System.Globalization
@using MeetWave.Helper
@{
    var rsvpClasses = new Dictionary<string, List<string>>
    {
        {"NA", new() { "btn-primary", "btn-outline-primary" } },
        {"Going", new() { "btn-success", "btn-outline-success" } },
        {"Interested", new() { "btn-secondary", "btn-outline-secondary" }}
    };
    
    var ti = new CultureInfo("en-US", false).TextInfo;
}

@if(calendarEvent != null)
{
    <RadzenTabs>
        <Tabs>
            <RadzenTabsItem Text="Event">
                @{
                    var startTime = calendarEvent.StartDate;
                    var rsvpStatus = UserRsvp?.State;
                    var rsvpDeleted = UserRsvp == null || UserRsvp.DeletedTS != null;
                    <HeadContent>
                        <meta property="og:title" content="Fetwave Event - @calendarEvent.Title" />
                        <meta property="og:description" content="@($"Happening on {startTime?.DayOfWeek} {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")" />
                    </HeadContent>

                    <h1>@calendarEvent.Title</h1>
                    <br />
                    <div class="card">
                        <div class="card-header">
                            <div class="form-inline">
                                <button type="button" @onclick=@(async () => await UpdateRsvp(null, UserRsvp, calendarEvent.Id)) class="btn @(rsvpDeleted ? rsvpClasses["NA"][0] : rsvpClasses["NA"][1])">N/A</button>
                                <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Going, UserRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Going.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Going"][0] : rsvpClasses["Going"][1])">Going</button>
                                <button type="button" @onclick=@(async () => await UpdateRsvp(RsvpStateEnum.Interested, UserRsvp, calendarEvent.Id)) class="btn @(!rsvpDeleted && (rsvpStatus?.Name?.Equals(Helper.RsvpStateEnum.Interested.ToString(), StringComparison.OrdinalIgnoreCase) ?? false) ? rsvpClasses["Interested"][0] : rsvpClasses["Interested"][1])">Interested</button>
                                @if (calendarEvent.CreatedUserId!.Equals(UserId.ToString(), StringComparison.OrdinalIgnoreCase))
                                {
                                    <button @onclick="GotoEditEvent">Edit</button>
                                }
                            </div>
                        </div>
                        <div class="card-body">
                            <h3 class="card-title"><a href="@($"/event/{calendarEvent.UniqueId}")">@calendarEvent.Title</a></h3>
                            <div class="share">
                                <button type="button" class="btn btn-info" onclick=@($"copyToClipboard(event, 'https://www.fetwave.com/event/{calendarEvent.UniqueId}')")>Copy Link</button>
                            </div>
                            <div class="eventDetails">
                                <h5><i class="bi bi-clock"></i>@($"Happening on {startTime?.DayOfWeek} {startTime:MM/dd/yyyy} at {startTime:hh:mm tt}")</h5>
                                @if (!string.IsNullOrEmpty(calendarEvent.Address))
                                {
                                    <h5><a href="https://www.google.com/maps/search/?api=1&query=@HttpUtility.UrlEncode(calendarEvent.Address)"><i class="bi bi-map"></i>@calendarEvent.Address</a></h5>
                                }
                                <p>@ti.ToTitleCase(calendarEvent.Region?.Name), @calendarEvent.Region?.StateCode</p>
                                @if (calendarEvent.Categories?.Any() ?? false)
                                {
                                    <p>Category: @(string.Join(", ", calendarEvent.Categories?.Select(d => d.Name) ?? []))</p>
                                }
                                @if (calendarEvent.DressCodes?.Any() ?? false)
                                {
                                    <p>Dress Code: @(string.Join(", ", calendarEvent.DressCodes?.Select(d => d.Name) ?? []))</p>
                                }
                            </div>
                            <p class="card-text">@calendarEvent.Description</p>
                            <p>Going: @((MarkupString)(GoingHTML ?? ""))</p>
                            <p>Interested: @((MarkupString)(InterestedHTML ?? ""))</p>
                        </div>
                        @if (Inventory?.Count > 0)
                        {
                            var hasLI = ssLineItems?.Any() ?? false;
                            var buttonTitle = $"{(hasLI ? "Add" : "Buy")} Ticket";
                            <div class="card-body">
                             <RadzenButton Text=@buttonTitle Style="width: 100%" Click="(() => SSAddLineItem())" />
                                <RadzenDataList @ref="ssDataList" Data="@ssLineItems" PagerHorizontalAlign="HorizontalAlign.Left">
                                    <Template Context="li">
                                        <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                                            <RadzenRow Gap="0">
                                                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Selection</RadzenText>
                                                    <RadzenDropDown TValue="int" Change="@((args) => LoadInventory(li, (int)args))" Data=@Inventory TextProperty="ItemName" ValueProperty="Id" Style="width: 100%; max-width: 400px;" Name="InventorySelector" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Price</RadzenText>
                                                    <RadzenTextBox Disabled="true" Style="width: 100%" aria-label="Inventory Price" Value="@StringHelper.GetDisplayPriceFromCents(li.Inventory?.ItemPriceCents)" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Item Quantity</RadzenText>
                                                    <RadzenNumeric @bind-Value="@li.Quantity" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
                                                    <RadzenButton Text="Delete" Style="width: 100%" Click="(() => SSDeleteLineItem(li))" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                        </RadzenCard>
                                    </Template>
                                </RadzenDataList>
                                @if (hasLI)
                                {
                                    <RadzenButton Disabled=@(!ValidateSSLineItems()) Click=@(async () => await Checkout()) Text="Checkout" />
                                }
                            </div>
                        }
                    </div>
                }
            </RadzenTabsItem>
            <RadzenTabsItem Text="Invoices">
                @if (Organizer)
                {
                    <div class="container">
                        <div class="row">
                            <h1>Inventory</h1>
                            <RadzenButton Text="AddLineItem" Style="width: 100%" Click="(() => AddInvLineItem())" />
                            <RadzenDataList @ref="invDataList" Data="@invLineItems" PagerHorizontalAlign="HorizontalAlign.Left">
                                <Template Context="li">
                                    <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                                        <RadzenRow Gap="0">
                                            <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Item Name</RadzenText>
                                                <RadzenTextBox Value="@li.Name" Change=@(args => OnNameChange(args, li)) Style="width: 100%" />
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Item Price (Cents)</RadzenText>
                                                <RadzenNumeric @bind-Value="@li.UnitPriceCents" />
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Units Available (optional)</RadzenText>
                                                <RadzenNumeric @bind-Value="@li.QuantityAvailable" />
                                            </RadzenColumn>
                                            <RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
                                                <RadzenButton Text="Delete" Style="width: 100%" Click="(async () => await DeleteInventory(li))" />
                                            </RadzenColumn>
                                        </RadzenRow>
                                    </RadzenCard>
                                </Template>
                            </RadzenDataList>
                            <RadzenButton Click="@(async () => await ProcessInventory())" Text="Process Inventory" />
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <h1>Individual Invoices</h1>
                                <RadzenButton Text="AddLineItem" Style="width: 100%" Click="(() => AddLineItem())" />
                                <RadzenDataList @ref="dataList" Data="@LineItems" PagerHorizontalAlign="HorizontalAlign.Left">
                                    <Template Context="li">
                                        <RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
                                            <RadzenRow Gap="0">
                                                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Item Name</RadzenText>
                                                    <RadzenTextBox Change=@(args => OnNameChange(args, li)) Style="width: 100%"/>
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Item Quantity</RadzenText>
                                                    <RadzenNumeric @bind-Value="@li.Quantity" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
                                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Item Price (Cents)</RadzenText>
                                                    <RadzenNumeric @bind-Value="@li.UnitPriceCents" />
                                                </RadzenColumn>
                                                <RadzenColumn Size="12" SizeLG="2" class="rz-p-4">
                                                    <RadzenButton Text="Delete" Style="width: 100%" Click="(() => DeleteLineItem(li))" />
                                                </RadzenColumn>
                                            </RadzenRow>
                                        </RadzenCard>
                                    </Template>
                                </RadzenDataList>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-12">
                            @foreach (var r in RSVPs ?? [])
                            {
                                <RadzenCheckBox @bind-Value=@SelectedRSVPs![r.Id] Name=@($"CheckBox{r.Id}") />
                                <RadzenLabel Text="@r.User.UserName" Component=@($"CheckBox{r.Id}") class="rz-ms-2" />
                                    <ul>
                                        @if (r.ApprovedTS is not null)
                                        {
                                            <li>Approved - @r.ApprovedTS.Value.ToString("yyyy-MM-dd HH:mm") UTC - <button type="button" @onclick=@(async () => await UnapproveRSVP(r.Id))>Undo Approval</button></li>
                                        }
                                        else
                                        {
                                            <li><button type="button" @onclick=@(async () => await ApproveRSVP(r.Id))>Approve</button></li>
                                        }
                                        @if (r.CheckInTS is not null)
                                        {
                                            <li>Checked In - @r.CheckInTS.Value.ToString("yyyy-MM-dd HH:mm") UTC - <button type="button" @onclick=@(async () => await UndoCheckin(r.Id))>Undo Check-In</button></li>
                                        }
                                        else
                                        {
                                            <li><button type="button" @onclick=@(async () => await Checkin(r.Id))>Check In</button></li>
                                        }

                                        @{
                                            var orders = GetEventOrderForUser(Guid.Parse(r.UserId));
                                        }
                                        @if (orders?.Any() ?? false)
                                        {
                                            var paid = orders.Where(o => o.Receipt.PaidTS != null);
                                            string paidStatus;
                                            if (paid.Count() == orders.Count())
                                                paidStatus = "PAID";
                                            else if (paid.Count() == 0)
                                                paidStatus = "UNPAID";
                                            else
                                                paidStatus = "PARTIALLY PAID";
                                            <li>Invoices - @paidStatus</li>
                                            <ul>
                                                @foreach (var o in orders)
                                                {
                                                    <li>@(o.Receipt.PaidTS != null ? "PAID" : "UNPAID") - @FormatInvoiceSummary(o)</li>
                                                }
                                            </ul>
                                        }
                                    </ul>
                            }
                            </div>
                            <div class="col-lg-6 col-md-12">
                                <input type="radio" name="emailList" value="@EmailListEnum.All" checked="@(EmailList?.Equals(EmailListEnum.All))" @onchange="EmailListOnChange" />
                                <label>All</label>
                                <br />
                                <input type="radio" name="emailList" value="@EmailListEnum.Approved" checked="@(EmailList?.Equals(EmailListEnum.Approved))" @onchange="EmailListOnChange" />
                                <label>Approved</label>
                                <br />
                                <input type="radio" name="emailList" value="@EmailListEnum.Selected" checked="@(EmailList?.Equals(EmailListEnum.Selected))" @onchange="EmailListOnChange" />
                                <label>Selected</label>
                                <br />
                                <label>Subject:</label><input type="text" @bind=@EmailSubject>

                                <RadzenHtmlEditor @bind-Value=@EmailBody style="height: 300px;" />
                                <button type="button" @onclick=@UpdateRecipients>Refresh Recipients</button>
                                @if (!string.IsNullOrEmpty(EmailFeedback))
                                {
                                    <p>@EmailFeedback</p>
                                }
                                @if (InvoiceRecipients?.Any() ?? false)
                                {
                                    <button type="button" @onclick=@SendEmail>Send Invoice</button>
                                    <br />

                                    <label>Recipients:</label>
                                    <p>@string.Join(", ", (InvoiceRecipients ?? []).Select(u => u.UserName)) </p>
                                }
                                else
                                {
                                    <button disabled type="button">Send Invoice</button>
                                    <p>Cannot send with no recipients</p>
                                }
                            </div>
                        </div>
                    </div>
                }
               @foreach (var o in UserOrders ?? [])
                {
                    @((MarkupString)FormatOrders(o))
                }
            </RadzenTabsItem>
            <RadzenTabsItem Text="Check-In">
                @if (UserRsvp != null && UserRsvp.DeletedTS == null)
                {
                    <p>Check-In Code: @((UserRsvp?.CheckinCodes?.Any() ?? false) ? UserRsvp?.CheckinCodes?.First().Code : "Generate") </p>
                    if (!(UserRsvp?.CheckinCodes?.Any() ?? false))
                    {
                        <RadzenButton Text="Generate Check-In Code" Click="@(async () => await GenerateCode())" />
                    }
                }
                @if (Organizer)
                {
                    <div class="container">
                        <div class="row">
                            <div class="col-lg-6 col-md-12">
                                <label>Check in code: </label><input type="text" @bind="OTP"/><RadzenButton Text="Check In" Click="@(async () => await SubmitOTP())" />
                                    <br />
                                    <ul>
                                    @foreach (var r in PendingCheckins)
                                    {
                                        <li>@r.User.UserName - <RadzenButton Text="Check In" Click="@(async () => await Checkin(r.Id))" />
                                        @((MarkupString)FormatRsvpListItem(r))
                                        </li>
                                    }
                                    </ul>
                            </div>
                            <div class="col-lg-6 col-md-12">
                                @foreach (var r in RSVPs ?? [])
                                {
                                    <RadzenLabel Text="@r.User.UserName" Component=@($"CheckBox{r.Id}") class="rz-ms-2" />
                                    <ul>
                                        @if (r.ApprovedTS is not null)
                                        {
                                            <li>Approved - @r.ApprovedTS.Value.ToString("yyyy-MM-dd HH:mm") UTC - <button type="button" @onclick=@(async () => await UnapproveRSVP(r.Id))>Undo Approval</button></li>
                                        }
                                        else
                                        {
                                            <li><button type="button" @onclick=@(async () => await ApproveRSVP(r.Id))>Approve</button></li>
                                        }
                                        @if (r.CheckInTS is not null)
                                        {
                                            <li>Checked In - @r.CheckInTS.Value.ToString("yyyy-MM-dd HH:mm") UTC - <button type="button" @onclick=@(async () => await UndoCheckin(r.Id))>Undo Check-In</button></li>
                                        }
                                        else
                                        {
                                            <li><button type="button" @onclick=@(async () => await Checkin(r.Id))>Check In</button></li>
                                        }

                                        @{
                                            var orders = GetEventOrderForUser(Guid.Parse(r.UserId));
                                        }
                                        @if (orders?.Any() ?? false)
                                        {
                                            var paid = orders.Where(o => o.Receipt.PaidTS != null);
                                            string paidStatus;
                                            if (paid.Count() == orders.Count())
                                                paidStatus = "PAID";
                                            else if (paid.Count() == 0)
                                                paidStatus = "UNPAID";
                                            else
                                                paidStatus = "PARTIALLY PAID";
                                            <li>Invoices - @paidStatus</li>
                                            <ul>
                                                @foreach (var o in orders)
                                                {
                                                    <li>@(o.Receipt.PaidTS != null ? "PAID" : "UNPAID") - @FormatInvoiceSummary(o)</li>
                                                }
                                            </ul>
                                        }
                                    </ul>
                                }
                            </div>
                        </div>
                    </div>
                }
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
    
}
